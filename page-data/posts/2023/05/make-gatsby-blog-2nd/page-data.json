{"componentChunkName":"component---src-pages-posts-markdown-remark-frontmatter-slug-tsx","path":"/posts/2023/05/make-gatsby-blog-2nd/","result":{"data":{"markdownRemark":{"html":"<h1>배포 과정</h1>\n<p>프로젝트를 배포 할 때는 역시 npm script를 작성해야 한다. 나의 최종 script는 아래와 같다.</p>\n<p><code>\"deploy\": \"git checkout main &#x26;&#x26; gatsby build --prefix-paths &#x26;&#x26; gh-pages -f -d public -b deploy\"</code></p>\n<p>총 3단락이다.</p>\n<ol>\n<li>main으로 브랜치를 옮기고</li>\n<li>build한다.</li>\n<li>npm package: gh-pages를 활용해서 배포한다.</li>\n</ol>\n<h2>1. checkout branch</h2>\n<p>나는 로컬에서 배포용 브랜치를 따로 관리하지 않을거다. 오로지 최종 결과물인 main브랜치를 이용한다.<br>\n애초에 main 브랜치에서 이 명령을 사용하더라도 결과값은 참이기 때문에 안전하다.</p>\n<h2>2. build</h2>\n<p>--prefix-path는 root/gatsby-config에서 설정 해 둔 pathPrefix를 갖다 쓰겠다는 플래그다.</p>\n<p>github pages에 배포를 하려다보면 자동으로 부여 받는 주소에 base path로 해당 remote repository의 이름이 붙는다. 이것을 pathPrefix로 설정 해 주어야 한다.(gatsby입장에서는 모르니까)</p>\n<h2>3. gh-pages</h2>\n<h4>-f 옵션</h4>\n<details>\n  <summary>gh-pages 패키지 <code>--no-history</code> 옵션 사용하기</summary>\n  <div style=\"background-color: #E2EADD; padding: 10px\">\n<p>gh-pages 패키지의 옵션 중 아래와 같은 것을 찾을 수 있다.</p>\n<blockquote>\n<p>-f, --no-history // Push force new commit without parent history</p>\n</blockquote>\n<p>gh-pages 패키지의 작동 방식을 보면 지정한 build directory를, 지정한 branch로 커밋하고, 이 branch를 github pages 서비스로 호스팅 한다. 그러니까 gh-pages를 실행 할 때마다 커밋 즉 커밋 히스토리가 쌓인다.</p>\n<p>처음에는 별거 아니어도 history가 쌓일수록 빌드 시간을 늘릴 수 있다고 한다. 이를 방지하는 옵션이다. <code>-f</code>라는 옵션 약어는 <code>git push --force</code>처럼 기존 히스토리에 강제로 덮어 씌워버리기 때문으로 보인다.</p>\n  </div>\n</details><br>\n<h4>-d 옵션</h4>\n<p>무엇을 배포 할 것인지인데, gatsby는 build하면 기본적으로 public이라는 폴더에 빌드 된다.</p>\n<h4>-b deploy</h4>\n<p>local이 아니라 remote 저장소에 어떤 브랜치로 배포 할 것인지를 뜻한다. 배포하려는 소스코드를 <code>-d</code> 옵션으로 선택했다면, 그것을 remote의 어느 브랜치로 push 할 것인지를 말이다.</p>\n<p>remote repository의 setting > github pages 탭에서 (deploy로)지정은 한번 해 줘야 할 것이다.</p>\n<h1>블로그에 글 쓰기</h1>\n<p><code>gatsby-source-filesystem</code> 패키지로 지정한 폴더에 자유롭게 글을 쓰고, <code>npm run deploy</code> 해 준다.</p>\n<p>물론 적절하게 commit하고 main브랜치 히스토리 관리하는 것도 신경 쓰면서. 나는 글 쓰기 위한 커밋만 따로 관리하기 위해서 'write' 라는 commit prefix를 추가하여 사용하기로 했다.</p>\n<h1>Reference</h1>\n<p><a href=\"https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/\">https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/</a></p>","frontmatter":{"title":"gatsby로_블로그_만들기_2탄_github_pages_배포하기","birth":"2023/05/30","modified":null},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%B0%B0%ED%8F%AC-%EA%B3%BC%EC%A0%95\">배포 과정</a></p>\n<ul>\n<li>\n<p><a href=\"#1-checkout-branch\">1. checkout branch</a></p>\n</li>\n<li>\n<p><a href=\"#2-build\">2. build</a></p>\n</li>\n<li>\n<p><a href=\"#3-gh-pages\">3. gh-pages</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-f-%EC%98%B5%EC%85%98\">-f 옵션</a></li>\n<li><a href=\"#-d-%EC%98%B5%EC%85%98\">-d 옵션</a></li>\n<li><a href=\"#-b-deploy\">-b deploy</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-%EA%B8%80-%EC%93%B0%EA%B8%B0\">블로그에 글 쓰기</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"494a4a5e-0ad0-5736-b39b-8bf796835b27","frontmatter__slug":"2023/05/make-gatsby-blog-2nd","__params":{"frontmatter__slug":"2023"}}},"staticQueryHashes":["3100864632"],"slicesMap":{}}